
fn test(a: int): int {
    let a = 0;
    while !(a == 3) {
        a = a + 1;
    }
    a
}


fn main(): int {
    test(3)
}



// functions should have a unique type like in rust
// functions can then be zero sized. At compile time the function can be figured out, so calling the function is just a opcode. Nothing is on the stack.
// operators and methods should also be like this
// so before an operator can be passed into a function, it needs to be turned into a closure / lambda